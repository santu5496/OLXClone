// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DbOperation.Models;

public partial class Assignment4Context : DbContext
{
    public Assignment4Context(DbContextOptions<Assignment4Context> options)
        : base(options)
    {
    }

    public virtual DbSet<BakedCookedLogs> BakedCookedLogs { get; set; }

    public virtual DbSet<BillOrderItems> BillOrderItems { get; set; }

    public virtual DbSet<Billing> Billing { get; set; }

    public virtual DbSet<Category> Category { get; set; }

    public virtual DbSet<Customers> Customers { get; set; }

    public virtual DbSet<DailyExpense> DailyExpense { get; set; }

    public virtual DbSet<Inventory> Inventory { get; set; }

    public virtual DbSet<InventoryItems> InventoryItems { get; set; }

    public virtual DbSet<ItemsUsedForGoods> ItemsUsedForGoods { get; set; }

    public virtual DbSet<MasterBranch> MasterBranch { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<PurchaseDetails> PurchaseDetails { get; set; }

    public virtual DbSet<RawMaterialLogs> RawMaterialLogs { get; set; }

    public virtual DbSet<Recipe> Recipe { get; set; }

    public virtual DbSet<ReturnItems> ReturnItems { get; set; }

    public virtual DbSet<ReturnManagement> ReturnManagement { get; set; }

    public virtual DbSet<Suppliers> Suppliers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BakedCookedLogs>(entity =>
        {
            entity.HasKey(e => e.logId).HasName("PK__BakedCoo__7839F64D5DA24432");

            entity.Property(e => e.actualQuantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.reasonForDiff)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.targetQuantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.updatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.fkItem).WithMany(p => p.BakedCookedLogs)
                .HasForeignKey(d => d.fkItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BakedCook__sUser__440B1D61");
        });

        modelBuilder.Entity<BillOrderItems>(entity =>
        {
            entity.HasKey(e => e.itemId).HasName("PK__BillOrde__56A128AADFA183BA");

            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.deliveredQty).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.deliveredStatus)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.entryType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.unit)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Billing>(entity =>
        {
            entity.HasKey(e => e.billId).HasName("PK__Billing__6D903F031488DD44");

            entity.Property(e => e.advanceAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.billDate).HasColumnType("datetime");
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.discount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)");
            entity.Property(e => e.finalAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.paymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.paymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.taxAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)");
            entity.Property(e => e.updatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.fkCustomer).WithMany(p => p.Billing)
                .HasForeignKey(d => d.fkCustomerId)
                .HasConstraintName("FK__Billing__fkCusto__5224328E");

            entity.HasOne(d => d.fkOrder).WithMany(p => p.Billing)
                .HasForeignKey(d => d.fkOrderId)
                .HasConstraintName("FK__Billing__fkOrder__51300E55");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Category__3213E83F5832D252");

            entity.Property(e => e.categoryName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.description)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.sUser)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Customers>(entity =>
        {
            entity.HasKey(e => e.customerId).HasName("PK__Customer__B611CB7DE7FC3C72");

            entity.Property(e => e.address)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.customerName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.phoneNo)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<DailyExpense>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__DailyExp__3213E83F4DD23A49");

            entity.Property(e => e.amountGiven).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.amountSpent).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.sUser)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.totalExpenses).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.updatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.inventoryID).HasName("PK__Inventor__C4B7BC2269927F09");

            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.quantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.item).WithMany(p => p.Inventory)
                .HasForeignKey(d => d.itemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Inventory__sUser__3A81B327");
        });

        modelBuilder.Entity<InventoryItems>(entity =>
        {
            entity.HasKey(e => e.itemId).HasName("PK__Inventor__56A128AA82729B88");

            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.itemDescription)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.itemName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.itemType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.pricePerUnit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.priceQuantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.unit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.fkCategory).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.fkCategoryId)
                .HasConstraintName("FK_InventoryItems_Category");
        });

        modelBuilder.Entity<ItemsUsedForGoods>(entity =>
        {
            entity.HasKey(e => e.itemId).HasName("PK__ItemsUse__56A128AAB6526A8B");

            entity.Property(e => e.goodsType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.quantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.unit)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.fkMasterItem).WithMany(p => p.ItemsUsedForGoods)
                .HasForeignKey(d => d.fkMasterItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ItemsUsedF__unit__00200768");
        });

        modelBuilder.Entity<MasterBranch>(entity =>
        {
            entity.HasKey(e => e.branchId).HasName("PK__MasterBr__751EBD5F1B981828");

            entity.Property(e => e.branchAddress).IsUnicode(false);
            entity.Property(e => e.city)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.displayName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.footerMessage)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.pincode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.sUser)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.HasKey(e => e.orderId).HasName("PK__Orders__0809335D1A14623F");

            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.orderDate).HasColumnType("datetime");
            entity.Property(e => e.orderPreparationStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Not Started");
            entity.Property(e => e.sUser)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Pending");
            entity.Property(e => e.totalAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.updatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.fkCustomer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.fkCustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer");
        });

        modelBuilder.Entity<PurchaseDetails>(entity =>
        {
            entity.HasKey(e => e.purchaseDetailId).HasName("PK__Purchase__FA43B55B833A4C07");

            entity.Property(e => e.pricePerUnit).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.quantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.totalAmount)
                .HasComputedColumnSql("([quantity]*[pricePerUnit])", false)
                .HasColumnType("decimal(21, 4)");
            entity.Property(e => e.unit)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.fkItem).WithMany(p => p.PurchaseDetails)
                .HasForeignKey(d => d.fkItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PurchaseD__fkIte__65370702");

            entity.HasOne(d => d.fkRawMaterial).WithMany(p => p.PurchaseDetails)
                .HasForeignKey(d => d.fkRawMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PurchaseD__fkRaw__6442E2C9");
        });

        modelBuilder.Entity<RawMaterialLogs>(entity =>
        {
            entity.HasKey(e => e.logId).HasName("PK__RawMater__7839F64DAFD47715");

            entity.Property(e => e.advanceAmount).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.paymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.paymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.purchaseDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.totalAmount).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.updatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.supplier).WithMany(p => p.RawMaterialLogs)
                .HasForeignKey(d => d.supplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RawMateri__suppl__412EB0B6");
        });

        modelBuilder.Entity<Recipe>(entity =>
        {
            entity.HasKey(e => e.recipeId).HasName("PK__Recipe__C114EE834435AC73");

            entity.Property(e => e.baseQuantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.sUser)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.unit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ReturnItems>(entity =>
        {
            entity.HasKey(e => e.returnItemTblId).HasName("PK__ReturnIt__B0970B68559BB302");

            entity.Property(e => e.ReuseDestination)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.discount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.returnDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.returnPrice).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.returnReason)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.unit)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.fkInventoryItem).WithMany(p => p.ReturnItemsfkInventoryItem)
                .HasForeignKey(d => d.fkInventoryItemId)
                .HasConstraintName("FK__ReturnIte__fkInv__00DF2177");

            entity.HasOne(d => d.fkReturn).WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.fkReturnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReturnItems_ReturnManagement");

            entity.HasOne(d => d.fkReuseDestianationItem).WithMany(p => p.ReturnItemsfkReuseDestianationItem)
                .HasForeignKey(d => d.fkReuseDestianationItemId)
                .HasConstraintName("FK_ReturnItems_ReuseDestianation");
        });

        modelBuilder.Entity<ReturnManagement>(entity =>
        {
            entity.HasKey(e => e.returnId).HasName("PK__ReturnMa__EBA76319A06031CD");

            entity.Property(e => e.TotalReturnPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.createdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.returnDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.returnDescription).HasMaxLength(1000);
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.updatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.fkReternManagement).WithMany(p => p.InversefkReternManagement)
                .HasForeignKey(d => d.fkReternManagementId)
                .HasConstraintName("FK__ReturnMan__fkRet__02C769E9");

            entity.HasOne(d => d.item).WithMany(p => p.ReturnManagement)
                .HasForeignKey(d => d.itemId)
                .HasConstraintName("FK__ReturnMan__itemI__3E1D39E1");
        });

        modelBuilder.Entity<Suppliers>(entity =>
        {
            entity.HasKey(e => e.supplierId).HasName("PK__Supplier__DB8E62EDD8307806");

            entity.HasIndex(e => e.supplierName, "UQ__Supplier__60A488508AAE3824").IsUnique();

            entity.Property(e => e.address).HasMaxLength(250);
            entity.Property(e => e.city)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.createdDate).HasColumnType("datetime");
            entity.Property(e => e.phoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.sUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.state)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.supplierName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.updatedDate).HasColumnType("datetime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}