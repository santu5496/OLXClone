<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management with Item Selection</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/css/dataTables.bootstrap5.min.css" rel="stylesheet">
</head>
<body>

    <style>
        .contentCenter {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .item-selection-modal .modal-dialog {
            max-width: 900px;
        }

        .category-filter {
            margin-bottom: 20px;
        }

        .items-grid {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 15px;
        }

        .item-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 10px;
            transition: all 0.2s;
            cursor: pointer;
        }

            .item-card:hover {
                border-color: #0d6efd;
                box-shadow: 0 2px 8px rgba(13, 110, 253, 0.15);
            }

            .item-card.selected {
                border-color: #0d6efd;
                background-color: #f8f9ff;
            }

        .item-details {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .item-info h6 {
            margin: 0;
            color: #212529;
        }

        .item-info small {
            color: #6c757d;
        }

        .item-price {
            font-weight: bold;
            color: #198754;
        }

        .quantity-input {
            width: 80px;
            margin-left: 10px;
        }

        .selected-items-summary {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
        }
    </style>

    <div class="container-fluid mt-3">
        <div>
        @Html.Partial("~/Partialviews/_SearchBar.cshtml")
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="Search orders..." id="searchBar">
            </div>
        </div>
        <button class="btn btn-primary mb-2 mt-2" onclick="LoadOrderForm()">Add Order</button>

        <table id="tblOrders" class="table table-bordered">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Customer Name</th>
                    <th>Order Date</th>
                    <th>Total Amount</th>
                    <th>Preparation Status</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

        <!-- Main Order Modal -->
        <div class="modal fade" id="orderModal" tabindex="-1" aria-labelledby="orderModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="orderModalLabel">Add Order</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Customer</label>
                            <select class="form-select ClearOrderModalData requiredfield" id="ddlCustomer"></select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Order Date</label>
                            <input type="date" class="form-control ClearOrderModalData requiredfield" id="txtOrderDateTime" />

                        </div>
                        <div class="mb-3">
                            <label class="form-label">Preparation Status</label>
                            <select class="form-select ClearOrderModalData requiredfield" id="ddlPreparationStatus">
                                <option selected value="Not started">Not started</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Ready">Ready</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select ClearOrderModalData requiredfield" id="ddlOrderStatus">
                                <option selected value="Pending">Pending</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <h5>Order Items</h5>
                            <table id="tblOrderItems" class="table table-bordered table-responsive">
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th>Quantity</th>
                                        <th>Unit</th>
                                        <th>Price</th>
                                        <th>Deliver Status</th>
                                        <th>Delivered Quantity</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                            <button class="btn btn-sm btn-primary mt-2" onclick="OpenItemSelectionModal()">Add Items</button>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Final Price</label>
                            <input type="number" class="form-control" id="txtFinalPrice" readonly />
                        </div>
                        <input type="hidden" class="ClearOrderModalData" id="txtOrderIdHidden">
                    </div>
                    <div class="modal-footer">
                        <button type="button" onclick="SaveOrder()" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Item Selection Modal -->
        <div class="modal fade item-selection-modal" id="itemSelectionModal" tabindex="-1" aria-labelledby="itemSelectionModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="itemSelectionModalLabel">Select Items for Order</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Category Filter -->
                        <div class="category-filter">
                            <label class="form-label">Filter by Category:</label>
                            <select class="form-select" id="categoryFilter" onchange="FilterItemsByCategory()">
                                <option value="">Show All Categories</option>
                            </select>
                        </div>

                        <!-- Search Items -->
                        <div class="mb-3">
                            <input type="text" class="form-control" id="itemSearch" placeholder="Search items..." onkeyup="SearchItems()">
                        </div>

                        <!-- Items Grid -->
                        <div class="items-grid" id="itemsGrid">
                            <!-- Items will be loaded here -->
                        </div>

                        <!-- Selected Items Summary -->
                        <div class="selected-items-summary" id="selectedItemsSummary" style="display: none;">
                            <h6>Selected Items Summary:</h6>
                            <div id="summaryContent"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" onclick="AddSelectedItemsToOrder()" class="btn btn-primary">Add Selected Items</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/dataTables.bootstrap5.min.js"></script>

   <script>
               // Global variables
        let selectedItems = [];
        let allInventoryItems = [];

        $(document).ready(function() {
            const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
            $('#txtOrderDateTime').val(today);
            GetOrdersData();

            $('#tblOrders').on('click', '.btn-edit', function() {
                var fullData = JSON.parse($(this).attr('data-full-data'));
                EditOrder(fullData);
            });

            $('#tblOrders').on('click', '.btn-delete', function() {
                var ID = JSON.parse($(this).attr('data-id'));
                DeleteWarning(DeleteOrder, ID);
            });
        });

        function ClearOrderModalData() 
        {
            $('.ClearOrderModalData').each(function () {
            if ($(this).is('select') || $(this).is('input')) {
                $(this).val('');
            }
        });
                function setSystemDateNow(inputId) {
            const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
            $(`#${inputId}`).val(today);
        }

             // Set current system date + time
        setSystemDateNow('txtOrderDateTime');
            // Set today's date as default
            const today = new Date().toISOString().split('T')[0];
            $('#txtOrderDateTime').val(today);

            // Reset dropdowns to first option
            $('#ddlPreparationStatus').val('Not started');
            $('#ddlOrderStatus').val('Pending');

            // Clear order items table
            $('#tblOrderItems tbody').empty();

            // Reset final price
            $('#txtFinalPrice').val('');
        }
                       function setSystemDateNow(inputId) {
            const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
            $(`#${inputId}`).val(today);
        }
               

               function LoadOrderForm() {
            ClearOrderModalData(); // Reset all form fields

            // Set system time (if using datetime-local input)
            setSystemDateNow('txtOrderDateTime'); // <-- Change ID if needed

            // Load customers and inventory, then show modal
            Promise.all([
                loadCustomersAsync(),
                loadInventoryItemsAsync()
            ]).then(() => {
                $('#orderModal').modal('show');
            }).catch(error => {
                console.error('Error loading form data:', error);
                alert('Error loading form data. Please try again.');
            });
        }


        function loadCustomersAsync() {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '/Configuration/GetCustomer',
                    type: 'POST',
                    success: function(response) {
                        const selectElement = $('#ddlCustomer');
                        selectElement.empty();

                        let options = `<option value="">Select Customer</option>`;

                        if (response && response.length > 0) {
                            options += response.map(item => `<option value="${item.customerId}">${item.customerName}</option>`).join('');
                        }

                        selectElement.html(options);
                        resolve(response);
                    },
                    error: function(xhr, status, error) {
                        console.error('Error loading customers:', error);
                        reject(error);
                    }
                });
            });
        }

        function loadInventoryItemsAsync() {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '/Configuration/GetInventoryItems',
                    type: 'GET',
                    success: function(response) {
                        if (response && Array.isArray(response)) {
                            window.inventoryItems = response;
                            allInventoryItems = response;
                            console.log('Inventory items loaded:', response.length);
                            resolve(response);
                        } else {
                            console.warn('Invalid inventory items response:', response);
                            allInventoryItems = [];
                            resolve([]);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error loading inventory items:', error);
                        allInventoryItems = [];
                        reject(error);
                    }
                });
            });
        }

        function GetCustomers() {
            return loadCustomersAsync();
        }

        function GetInventoryItems() {
            return loadInventoryItemsAsync();
        }

        // New function to open item selection modal
        function OpenItemSelectionModal() {
            // Check if inventory items are loaded
            if (!allInventoryItems || allInventoryItems.length === 0) {
                alert('Please wait, loading inventory items...');
                loadInventoryItemsAsync().then(() => {
                    if (allInventoryItems && allInventoryItems.length > 0) {
                        selectedItems = [];
                        LoadItemSelectionModal();
                        $('#itemSelectionModal').modal('show');
                    } else {
                        alert('Unable to load inventory items. Please try again.');
                    }
                }).catch(error => {
                    alert('Error loading inventory items: ' + error);
                });
                return;
            }

            selectedItems = [];
            LoadItemSelectionModal();
            $('#itemSelectionModal').modal('show');
        }

        function LoadItemSelectionModal() {
            // Load categories
            LoadCategories();

            // Load all items
            DisplayItems(allInventoryItems);

            // Reset search
            $('#itemSearch').val('');
            $('#categoryFilter').val('');

            // Hide summary initially
            $('#selectedItemsSummary').hide();
        }

        function LoadCategories() {
            // Check if allInventoryItems is populated
            if (!allInventoryItems || allInventoryItems.length === 0) {
                console.warn('No inventory items available for categories');
                return;
            }

            const categories = [...new Set(allInventoryItems.map(item => item.categeoryName).filter(cat => cat))];
            const categorySelect = $('#categoryFilter');

            categorySelect.empty().append('<option value="">Show All Categories</option>');
            categories.forEach(category => {
                if (category) { // Only add non-empty categories
                    categorySelect.append(`<option value="${category}">${category}</option>`);
                }
            });
        }

        function DisplayItems(items) {
            const itemsGrid = $('#itemsGrid');
            itemsGrid.empty();

            if (items.length === 0) {
                itemsGrid.html('<p class="text-center text-muted">No items found</p>');
                return;
            }

            items.forEach(item => {
                // FIX: Add null/undefined checks for all properties
                const itemId = item.itemId || 0;
                const itemName = item.itemName || 'Unknown Item';
                const category = item.categeoryName || 'Unknown Category';
                const unit = item.unit || 'Unit';
                const pricePerUnit = item.pricePerUnit || 0; // FIX: Default to 0 if null/undefined

                const isSelected = selectedItems.some(selected => selected.itemId === itemId);
                const selectedQuantity = isSelected ? selectedItems.find(selected => selected.itemId === itemId).quantity : 1;

                const itemCard = `
                    <div class="item-card ${isSelected ? 'selected' : ''}" data-item-id="${itemId}">
                        <div class="item-details">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="item_${itemId}"
                                       ${isSelected ? 'checked' : ''} onchange="ToggleItemSelection(${itemId})">
                                <label class="form-check-label" for="item_${itemId}">
                                    <div class="item-info">
                                        <h6>${itemName}</h6>
                                        <small>Category: ${category} | Unit: ${unit}</small>
                                    </div>
                                </label>
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="item-price">₹${pricePerUnit.toFixed(2)}</span>
                                <input type="number" class="form-control quantity-input"
                                       id="qty_${itemId}" value="${selectedQuantity}" min="1"
                                       onchange="UpdateItemQuantity(${itemId}, this.value)"
                                       ${!isSelected ? 'disabled' : ''}>
                            </div>
                        </div>
                    </div>
                `;
                itemsGrid.append(itemCard);
            });
        }

        function ToggleItemSelection(itemId) {
            const item = allInventoryItems.find(i => i.itemId === itemId);
            const checkbox = $(`#item_${itemId}`);
            const quantityInput = $(`#qty_${itemId}`);
            const itemCard = $(`.item-card[data-item-id="${itemId}"]`);

            if (checkbox.is(':checked')) {
                // Add item to selection
                const quantity = parseInt(quantityInput.val()) || 1;
                selectedItems.push({
                    itemId: item.itemId || 0,
                    itemName: item.itemName || 'Unknown Item',
                    category: item.category || 'Unknown Category',
                    unit: item.unit || 'Unit',
                    pricePerUnit: item.pricePerUnit || 0, // FIX: Default to 0 if null/undefined
                    quantity: quantity
                });
                quantityInput.prop('disabled', false);
                itemCard.addClass('selected');
            } else {
                // Remove item from selection
                selectedItems = selectedItems.filter(selected => selected.itemId !== itemId);
                quantityInput.prop('disabled', true);
                itemCard.removeClass('selected');
            }

            UpdateSelectedItemsSummary();
        }

        function UpdateItemQuantity(itemId, quantity) {
            const selectedItem = selectedItems.find(item => item.itemId === itemId);
            if (selectedItem) {
                selectedItem.quantity = parseInt(quantity) || 1;
                UpdateSelectedItemsSummary();
            }
        }

        function UpdateSelectedItemsSummary() {
            const summaryDiv = $('#selectedItemsSummary');
            const summaryContent = $('#summaryContent');

            if (selectedItems.length === 0) {
                summaryDiv.hide();
                return;
            }

            let summaryHTML = '<div class="row">';
            let totalAmount = 0;

            selectedItems.forEach(item => {
                // FIX: Add null checks for calculations
                const quantity = item.quantity || 0;
                const pricePerUnit = item.pricePerUnit || 0;
                const itemTotal = quantity * pricePerUnit;
                totalAmount += itemTotal;

                summaryHTML += `
                    <div class="col-md-6 mb-2">
                        <small><strong>${item.itemName}</strong> - Qty: ${quantity} ${item.unit} - ₹${itemTotal.toFixed(2)}</small>
                    </div>
                `;
            });

            summaryHTML += '</div>';
            summaryHTML += `<hr><strong>Total Selected Items: ${selectedItems.length} | Total Amount: ₹${totalAmount.toFixed(2)}</strong>`;

            summaryContent.html(summaryHTML);
            summaryDiv.show();
        }

        function FilterItemsByCategory() {
            const selectedCategory = $('#categoryFilter').val();
            const searchTerm = $('#itemSearch').val().toLowerCase();

            let filteredItems = allInventoryItems;

            if (selectedCategory) {
                filteredItems = filteredItems.filter(item => item.categeoryName === selectedCategory);
            }

            if (searchTerm) {
                filteredItems = filteredItems.filter(item =>
                    (item.itemName || '').toLowerCase().includes(searchTerm) ||
                    (item.category || '').toLowerCase().includes(searchTerm)
                );
            }

            DisplayItems(filteredItems);
        }

        function SearchItems() {
            FilterItemsByCategory();
        }

        function AddSelectedItemsToOrder() {
            if (selectedItems.length === 0) {
                alert('Please select at least one item.');
                return;
            }

            const tableBody = $('#tblOrderItems tbody');
            let currentRowCount = tableBody.children().length;

            selectedItems.forEach((item, index) => {
                const rowIndex = currentRowCount + index;
                const quantity = item.quantity || 0;
                const pricePerUnit = item.pricePerUnit || 0;
                const totalPrice = quantity * pricePerUnit;

                const newRow = `
                    <tr>
                        <td>
                            <select class="form-select item-dropdown" id="item_${rowIndex}" onchange="UpdatePriceAndUnit(${rowIndex})">
                            </select>
                        </td>
                        <td><input type="number" class="form-control" id="quantity_${rowIndex}" value="${quantity}" oninput="CalculatePrice(${rowIndex})"/></td>
                        <td><input type="text" class="form-control unit-field" id="unit_${rowIndex}" value="${item.unit}" readonly/></td>
                        <td><input type="number" class="form-control item-price" id="price_${rowIndex}" value="${totalPrice.toFixed(2)}" readonly/></td>
                        <td><input type="text" class="form-control item-Deliverstatus" id="Deliverstatus_${rowIndex}" value="Pending"/></td>
                        <td><input type="number" class="form-control item-DeliverdQuantity" id="DeliverdQuantity_${rowIndex}" value="0"/></td>
                        <td><button class="btn btn-sm btn-danger" onclick="RemoveOrderItemRow(this)">Remove</button></td>
                    </tr>
                `;

                tableBody.append(newRow);
                // Load all items first, then set the selected one
                LoadOrderItemsForRow(rowIndex, item.itemId);
            });

            UpdateFinalPrice();
            $('#itemSelectionModal').modal('hide');

            // Show success message
            alert(`${selectedItems.length} items added to the order successfully!`);
        }

        function LoadOrderItemsForRow(index, selectedItemId = null) {
            let selectElement = $(`#item_${index}`);
            selectElement.empty().append('<option value="">Select Item</option>');

            // Check if allInventoryItems is populated
            if (!allInventoryItems || allInventoryItems.length === 0) {
                console.warn('No inventory items available');
                return;
            }

            allInventoryItems.forEach(item => {
                const pricePerUnit = item.pricePerUnit || 0;
                const itemName = item.itemName || 'Unknown Item';
                const unit = item.unit || 'Unit';
                const itemId = item.itemId;

                const isSelected = selectedItemId && itemId == selectedItemId ? 'selected' : '';
                selectElement.append(`<option value="${itemId}" data-unit="${unit}" data-price="${pricePerUnit}" ${isSelected}>${itemName}</option>`);
            });
        }

        // Original functions (updated where necessary)
        function AddOrderItemRow() {
            let tableBody = $('#tblOrderItems tbody');
            let rowIndex = tableBody.children().length;
            let newRow = `<tr>
                           <td><select class="form-select item-dropdown" id="item_${rowIndex}" onchange="UpdatePriceAndUnit(${rowIndex})"></select></td>
                           <td><input type="number" class="form-control" id="quantity_${rowIndex}" oninput="CalculatePrice(${rowIndex})"/></td>
                           <td><input type="text" class="form-control unit-field" id="unit_${rowIndex}" readonly/></td>
                           <td><input type="number" class="form-control item-price" id="price_${rowIndex}" /></td>
                           <td><input type="text" class="form-control item-Deliverstatus" id="Deliverstatus_${rowIndex}" /></td>
                           <td><input type="number" class="form-control item-DeliverdQuantity" id="DeliverdQuantity_${rowIndex}" /></td>
                           <td><button class="btn btn-sm btn-danger" onclick="RemoveOrderItemRow(this)">Remove</button></td>
                       </tr>`;
            tableBody.append(newRow);
            LoadOrderItems(rowIndex);
        }

        function RemoveOrderItemRow(button) {
            var row = $(button).closest('tr');
            row.remove();
            UpdateFinalPrice();
        }

        function LoadOrderItems(index, selectedItemId = null) {
            let selectElement = $(`#item_${index}`);
            selectElement.empty().append('<option value="">Select Item</option>');

            // Check if allInventoryItems is populated
            if (!allInventoryItems || allInventoryItems.length === 0) {
                console.warn('No inventory items available');
                return;
            }

            allInventoryItems.forEach(item => {
                const pricePerUnit = item.pricePerUnit || 0;
                const itemName = item.itemName || 'Unknown Item';
                const unit = item.unit || 'Unit';
                const itemId = item.itemId;

                const isSelected = selectedItemId && itemId == selectedItemId ? 'selected' : '';
                selectElement.append(`<option value="${itemId}" data-unit="${unit}" data-price="${pricePerUnit}" ${isSelected}>${itemName}</option>`);
            });
        }

        function UpdatePriceAndUnit(index) {
            let selectedOption = $(`#item_${index} option:selected`);
            let unit = selectedOption.data('unit');
            let pricePerUnit = parseFloat(selectedOption.data('price')) || 0; // FIX: Default to 0 if null/undefined
            $(`#unit_${index}`).val(unit);
            CalculatePrice(index);
            UpdateFinalPrice();
        }

        function CalculatePrice(index) {
            let quantity = parseFloat($(`#quantity_${index}`).val()) || 0;
            let pricePerUnit = parseFloat($(`#item_${index} option:selected`).data('price')) || 0; // FIX: Default to 0 if null/undefined
            $(`#price_${index}`).val((quantity * pricePerUnit).toFixed(2));
            UpdateFinalPrice();
        }

        function UpdateFinalPrice() {
            let total = 0;
            $('.item-price').each(function() {
                total += parseFloat($(this).val()) || 0;
            });
            $('#txtFinalPrice').val(total.toFixed(2));
        }

        function GetOrdersData() {
            // Get the selected start and end date values from the input fields
            let startDate = $('#startDate').val();
            let endDate = $('#endDate').val();

            // Initialize DataTable
            var table = $('#tblOrders').DataTable();
            table.clear();  // Clear the existing data
            table.draw();   // Redraw the table after clearing

            // Send the AJAX request with the date range
            $.ajax({
                url: '/OrderManagement/GetAllOrders', // Your endpoint to fetch orders
                type: 'GET', // Change this to POST if necessary
                data: { sd: startDate, ed: endDate }, // Pass the start and end date as query parameters
                success: function(response) {
                    // Add the orders data to the table
                    response.forEach(function(order) {
                        table.row.add([
                            order.orderId,
                            order.fkCustomer.customerName, // Assuming fkCustomer.customerName exists
                            order.orderDate,
                            order.totalAmount,
                            order.orderPreparationStatus,
                            order.status,
                            '<div class="contentCenter">' +
                                '<i class="fa fa-edit me-4 ml-2 btn-edit" style="color:green" data-full-data=\'' + JSON.stringify(order) + '\'></i>' +
                                '<i class="fa fa-trash ml-2 btn-delete" style="color:red" data-id=\'' + JSON.stringify(order.orderId) + '\'></i>' +
                            '</div>'
                        ]).draw();
                    });
                },
                error: function(xhr, status, error) {
                    alert('An error occurred: ' + error); // Handle errors that occur during the request
                }
            });
        }

        function SaveOrder() {
            // Gather order details
            let orderData = {
                orderId: $('#txtOrderIdHidden').val(),
                fkCustomerId: $('#ddlCustomer').val(),
                orderDate: $('#txtOrderDateTime').val(),
                orderPreparationStatus: $('#ddlPreparationStatus').val(),
                status: $('#ddlOrderStatus').val(),
                totalAmount: $('#txtFinalPrice').val(),
            };

            // Gather order items from the order items table
            let orderItems = [];
            $('#tblOrderItems tbody tr').each(function() {
                let item = {
                    fkItemId: $(this).find('.item-dropdown').val(),
                    quantity: $(this).find('input[id^="quantity_"]').val(),
                    unit: $(this).find('.unit-field').val(),
                    price: $(this).find('.item-price').val(),
                    deliveredQty: $(this).find('input[id^="DeliverdQuantity_"]').val(),
                    deliveredStatus: $(this).find('input[id^="Deliverstatus_"]').val()
                };

                // Debugging: check values for delivered quantity and status
                console.log('Delivered Quantity:', $(this).find('input[id^="DeliverdQuantity_"]').val());
                console.log('Delivered Status:', $(this).find('input[id^="Deliverstatus_"]').val());

                orderItems.push(item);
            });

            // Send the data to the server as two separate parameters
            $.ajax({
                url: "/OrderManagement/AddOrEditOrder",
                type: 'POST',
                data: {
                    order: orderData,
                    billOrderItems: orderItems
                },
                success: function(response) {
                    if (response) {
                        msgPopup('success', 'Data saved successfully');
                        $('#orderModal').modal('hide');
                        GetOrdersData();
                    } else {
                        msgPopup('error', 'Failed to save data.');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', xhr.responseText);
                    msgPopup('error', 'An error occurred while saving the order.');
                }
            });
        }

        function EditOrder(order) {
            console.log('Editing order:', order);

            // Load customers and inventory items first, then populate the form
            Promise.all([
                loadCustomersAsync(),
                loadInventoryItemsAsync()
            ]).then(() => {
                populateEditForm(order);
            }).catch(error => {
                console.error('Error loading data for edit:', error);
                alert('Error loading required data. Please try again.');
            });
        }

            function populateEditForm(order) {
            try {
                // Safely get customer ID
                let customerId = (order.fkCustomer && order.fkCustomer.customerId) ? order.fkCustomer.customerId : '';

                // Set order header fields
                $('#txtOrderIdHidden').val(order.orderId || '');
                $('#ddlCustomer').val(customerId);

                // Set only date (not datetime) from orderDate
                const dateOnly = order.orderDate ? order.orderDate.split('T')[0] : '';
                $('#txtOrderDateTime').val(dateOnly);

                $('#ddlPreparationStatus').val(order.orderPreparationStatus || 'Not started');
                $('#ddlOrderStatus').val(order.status || 'Pending');
                $('#txtFinalPrice').val(order.totalAmount || '0.00');

                // Clear existing items
                $('#tblOrderItems tbody').empty();

                // Load order items into table
                if (Array.isArray(order.orderItems)) {
                    order.orderItems.forEach((item, index) => {
                        let row = `
                            <tr>
                                <td>
                                    <select class="form-select item-dropdown" id="item_${index}" onchange="UpdatePriceAndUnit(${index})"></select>
                                </td>
                                <td><input type="number" class="form-control" id="quantity_${index}" value="${item.quantity || 0}" oninput="CalculatePrice(${index})"/></td>
                                <td><input type="text" class="form-control unit-field" id="unit_${index}" value="${item.unit || ''}" readonly/></td>
                                <td><input type="number" class="form-control item-price" id="price_${index}" value="${item.price || 0}" readonly/></td>
                                <td><input type="text" class="form-control item-Deliverstatus" id="Deliverstatus_${index}" value="${item.deliveredStatus || 'Pending'}" /></td>
                                <td><input type="number" class="form-control item-DeliverdQuantity" id="DeliverdQuantity_${index}" value="${item.deliveredQty || 0}" /></td>
                                <td><button class="btn btn-sm btn-danger" onclick="RemoveOrderItemRow(this)">Remove</button></td>
                            </tr>`;
                        $('#tblOrderItems tbody').append(row);
                        LoadOrderItems(index, item.fkItemId); // populate item dropdown
                    });
                } else {
                    console.warn('No order items found.');
                }

                // Show modal
                $('#orderModal').modal('show');
            } catch (error) {
                console.error('Error populating edit form:', error);
                alert('Error loading order data for editing.');
            }
        }


        function DeleteOrder(orderId) {
            $.ajax({
                url: `/OrderManagement/DeleteOrder/`,
                data: { id: orderId },
                type: 'POST',
                success: function() {
                    GetOrdersData();
                }
            });
        }

        function DeleteWarning(callback, id) {
            if (confirm('Are you sure you want to delete this order?')) {
                callback(id);
            }
        }
   </script>

</body>
</html>